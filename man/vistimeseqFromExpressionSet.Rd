% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/vistimeseq_class.R
\name{vistimeseqFromExpressionSet}
\alias{vistimeseqFromExpressionSet}
\title{vistimeseq object and constructor from ExpressionSet}
\usage{
vistimeseqFromExpressionSet(eset, time_column, replicate_column = NULL,
  group_column = NULL, project = "'vistimeseq' time course project")
}
\arguments{
\item{eset}{ExpressionSet object}

\item{time_column}{A character string equal to one of the column names
of \code{sample.data}. This is an alternative, way of specifying the time
corresponding to samples, if \code{time} argument is not provided.}

\item{replicate_column}{A character string equal to one of the column names
of \code{sample.data}. This is an alternative, way of specifying the
replicate corresponding to samples, if \code{replicate} argument is not
provided. If both \code{replicate} and \code{replicate_column} are not set,
the function assumes all samples come from the same replicate, and assigns
a replicate name 'R1' to all samples.}

\item{group_column}{A character string equal to one of the column names
of \code{sample.data}. This is an alternative, way of specifying the
replicate corresponding to samples, if \code{replicate} argument is not
provided. If both \code{group} and \code{group_column} are not set, the
function assumes all samples come from the same group, and assigns a group
name 'G1' to all samples.}

\item{project}{Project name (string)}
}
\value{
Returns a vistimeseq object with the raw data stored in
object@raw.data, object@sample.data object@group, object@replicate,
and object@time are also initialized.
}
\description{
Initializes the vistimeseq object from ExpressionSet
and populates the time, replicate, and group slots.
}
\examples{
library(Biobase)
cop1_eset <- readRDS(
file = system.file("extdata", "NGS1471_esetCounts_fltr.rds",
  package = "vistimeseq", mustWork = TRUE)
)
# convert timpoint data T0, T2.5, T4, ..., T13 to numeric values
pData(cop1_eset)$time <- gsub("T", "", pData(cop1_eset)$time)
pData(cop1_eset)$time <- as.numeric(pData(cop1_eset)$time)
cop1_vistimeseq <- vistimeseqFromExpressionSet(
  cop1_eset, time = "time", group = "genotype", replicate = "individual")
cop1_vistimeseq

}
